// Generated by CoffeeScript 1.6.1
(function() {
  var OPC,
    _this = this;

  if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function() {
      return this.replace(/^\s+|\s+$/g, '');
    };
  }

  $(document).ready(function() {
    window.OPC = OPC;
    return window.OPC.init();
  });

  jQuery.fn.center = function() {
    this.css("position", "absolute");
    this.css("top", (($(window).height() - this.outerHeight()) / 2) + $(window).scrollTop() + "px");
    this.css("left", (($(window).width() - this.outerWidth()) / 2) + $(window).scrollLeft() + "px");
    return this;
  };

  OPC = (function() {

    OPC.version = '3.0.1';

    OPC.callback_id = 0;

    OPC.pending_callbacks = 0;

    OPC.max_callbacks = 10;

    OPC.serverURL = 'http://localhost:58725';

    OPC.interval = 1000;

    OPC.connections = [];

    OPC.empty_connections = function() {
      var oc, _i, _len, _ref;
      if (OPC.connections != null) {
        _ref = OPC.connections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          oc = _ref[_i];
          oc.toggle_refresh(false);
          oc = null;
        }
      }
      OPC.connections = [];
      return null;
    };

    OPC.init = function() {
      var defcon, oc, _i, _len, _ref;
      _ref = window.OPC.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oc = _ref[_i];
        oc.toggle_refresh(false);
      }
      if (window.OPC_config != null) {
        OPC.empty_connections();
        return defcon = new OPC(window.OPC_config);
      }
    };

    OPC.toggle_refresh = function(start) {
      var c, _i, _len, _ref;
      _ref = OPC.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.toggle_refresh(start);
      }
      return start;
    };

    OPC.clean_callback = function(cid) {
      if ((window["opcwebcb_" + cid] != null)) {
        if (window.null_func == null) {
          window.null_func = function() {
            return true;
          };
        }
        try {
          delete window["opcwebcb_" + cid];
        } catch (e) {

        }
        window["opcwebcb_" + cid] = window.null_func;
      }
      OPC.pending_callbacks -= 1;
      if (OPC.pending_callbacks < 0) {
        OPC.pending_callbacks = 0;
      }
      return this;
    };

    OPC.get_value = function(tag, prop) {
      var oc;
      if ((OPC.connections != null) && OPC.connections.length === 1) {
        oc = OPC.connections[0];
        return oc.get_value(tag, prop);
      }
      return null;
    };

    OPC.set_value = function(tag, prop, val) {
      var oc;
      if ((OPC.connections != null) && OPC.connections.length === 1) {
        oc = OPC.connections[0];
        return oc.set_value(tag, prop, val);
      }
      return null;
    };

    OPC.authenticate = function(un, pw) {
      var oc, _i, _len, _ref, _results;
      _ref = OPC.connections;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oc = _ref[_i];
        _results.push(oc.authenticate(un, pw));
      }
      return _results;
    };

    OPC.is_refreshing = function() {
      var oc, _i, _len, _ref;
      _ref = OPC.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oc = _ref[_i];
        if (oc.is_refreshing()) {
          return true;
        }
      }
      return false;
    };

    OPC.prototype.set_val_ops = function() {
      var _this = this;
      return this.val_ops = {
        'src': function(a, el, v, dt, q) {
          _this.set_attr($(el).attr('id'), 'orig-src', 'src', a.config, v);
          return true;
        },
        'bkg': function(a, el, v, dt, q) {
          _this.set_styles(el, 'bkg', a.config, v, 'background-color');
          return true;
        },
        'bkg-fl': function(a, el, v, dt, q) {
          _this.flash(el, a, v, 'background-color');
          return true;
        },
        'fg': function(a, el, v, dt, q) {
          _this.set_styles(el, 'fg', a.config, v, 'color');
          return true;
        },
        'fg-fl': function(a, el, v, dt, q) {
          _this.flash(el, a, v, 'color');
          return true;
        },
        'brd': function(a, el, v, dt, q) {
          _this.set_styles(el, 'brd', a.config, v, 'border-color');
          return true;
        },
        'brd-fl': function(a, el, v, dt, q) {
          _this.flash(el, a, v, 'border-color');
          return true;
        },
        'val': function(a, el, v, dt, q) {
          var vals;
          if ((v != null) && v !== "" && (a.config != null) && ((a.config.gain != null) || (a.config.rate != null) || (a.config.offset != null))) {
            vals = _this.resolve_value(a.config, v);
            v = vals.val;
          }
          $(el).val(_this.format_data(v, dt, a.config, q));
          return true;
        },
        'txt': function(a, el, v, dt, q) {
          var vals;
          $(el).empty();
          if ((v != null) && v !== "" && (a.config != null) && ((a.config.gain != null) || (a.config.rate != null) || (a.config.offset != null))) {
            vals = _this.resolve_value(a.config, v);
            v = vals.val;
          }
          $(el).html(_this.format_data(v, dt, a.config, q));
          return true;
        },
        'tt': function(a, el, v, dt, q) {
          $(el).attr('title', _this.format_data(v, dt, a.config, q));
          return true;
        },
        'en': function(a, el, v, dt, q) {
          var en;
          en = true;
          if ((v == null) && (a != null) && (a.config != null) && (a.config.bad_q != null)) {
            en = _this.parseBool(a.config.bad_q);
          } else if (v != null) {
            en = _this.parseBool(v);
            if ((a.config != null) && (a.config.trigger != null) && a.config.trigger === 'on_false') {
              en = !en;
            }
          }
          if (en) {
            $(el).removeAttr("disabled");
          } else {
            $(el).attr("disabled", "disabled");
          }
          return true;
        },
        'vis': function(a, el, v, dt, q) {
          var rate, vis;
          vis = true;
          rate = (a.config != null) && (a.config.rate != null) ? parseFloat(a.config.rate) : 100;
          if ((v == null) && (a != null) && (a.config != null) && (a.config.bad_q != null)) {
            vis = _this.parseBool(a.config.bad_q);
          } else if (v != null) {
            vis = _this.parseBool(v);
            if ((a.config != null) && (a.config.trigger != null) && a.config.trigger === 'on_false') {
              vis = !vis;
            }
          }
          if (vis) {
            $(el).css("display", "").animate({
              opacity: 1
            }, {
              duration: rate,
              queue: false
            });
          } else {
            $(el).animate({
              opacity: 0
            }, {
              duration: rate,
              queue: false,
              done: function() {
                return $(this).css("display", "none");
              }
            });
          }
          return true;
        },
        'op': function(a, el, v, dt, q) {
          var vals;
          vals = _this.resolve_value(a.config, v);
          if (vals != null) {
            $(el).animate({
              opacity: vals.val
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'wd': function(a, el, v, dt, q) {
          var vals;
          vals = _this.resolve_value(a.config, v);
          if (vals != null) {
            $(el).animate({
              width: vals.val
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'ht': function(a, el, v, dt, q) {
          var vals;
          vals = _this.resolve_value(a.config, v);
          if (vals != null) {
            $(el).animate({
              height: vals.val
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'sx': function(a, el, v, dt, q) {
          var co, vals;
          vals = _this.resolve_value(a.config, v);
          co = _this.get_styles($(el).attr('id'), 'outerWidth', $(el).outerWidth());
          if (vals != null) {
            $(el).animate({
              width: vals.val * co.original + vals.offset
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'sy': function(a, el, v, dt, q) {
          var co, vals;
          vals = _this.resolve_value(a.config, v);
          co = _this.get_styles($(el).attr('id'), 'outerHeight', $(el).outerHeight());
          if (vals != null) {
            $(el).animate({
              height: (vals.val * co.original) + vals.offset
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'tx': function(a, el, v, dt, q) {
          var vals;
          vals = _this.resolve_value(a.config, v);
          if (vals != null) {
            $(el).css("position", "absolute");
            $(el).animate({
              left: vals.val
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'ty': function(a, el, v, dt, q) {
          var vals;
          vals = _this.resolve_value(a.config, v);
          if (vals != null) {
            $(el).css("position", "absolute");
            $(el).animate({
              top: vals.val
            }, {
              duration: vals.rate,
              queue: false
            });
          }
          return true;
        },
        'set': function(tag, prop, cfg, el) {
          var cancel_text, do_conf, mcfg, mdl, message, ok_text, show_input, title, v, validation;
          v = null;
          cancel_text = 'CANCEL';
          ok_text = 'OK';
          if ((cfg.set_confirm_buttons != null) && cfg.set_confirm_buttons === 'yesno') {
            cancel_text = 'NO';
            ok_text = 'YES';
          }
          message = cfg.set_confirm_msg != null ? cfg.set_confirm_msg : "Save new value for " + tag + "." + prop + "?";
          title = cfg.set_confirm_title != null ? cfg.set_confirm_title : 'Confirm Submission';
          do_conf = _this.parseBool(cfg.set_confirm);
          show_input = false;
          validation = cfg.validation;
          switch (cfg.set) {
            case "value":
              v = null;
              if (cfg.set_value != null) {
                v = cfg.set_value;
              } else if (cfg.set_src != null) {
                v = $("#" + cfg.set_src, _this.root_elem).val();
              } else {
                v = $(el).val();
              }
              break;
            case "input":
              do_conf = true;
              show_input = true;
              title = cfg.set_confirm_title != null ? title : 'Enter a Value';
              v = null;
              break;
            case "toggle":
              v = "toggle";
          }
          if (do_conf) {
            mcfg = {
              tag: tag,
              prop: prop,
              title: title,
              message: message,
              show_input: show_input,
              val: v,
              buttons: [
                {
                  text: cancel_text
                }, {
                  text: ok_text,
                  click: _this.set_value
                }
              ],
              validation: validation
            };
            mdl = new OPC.Modal(mcfg);
          } else if (v != null) {
            _this.set_value(tag, prop, v);
          }
          return true;
        },
        'fn': function(a, el, v, dt, q) {
          if ((v != null) && _this.parseBool(v) && (a.config != null) && (a.config.fn != null)) {
            _this.execute_fn(a.config.fn);
          }
          return true;
        },
        'style': function(a, el, v, dt, q) {
          var s;
          s = (a != null) && (a.config != null) && (a.config.style != null) ? a.config.style : null;
          if (v != null) {
            _this.set_attr($(el).attr('id'), 'orig-style', 'style', s, v);
          }
          return true;
        },
        'cls': function(a, el, v, dt, q) {
          var c;
          c = (a != null) && (a.config != null) && (a.config.cls != null) ? a.config.cls : null;
          if (v != null) {
            _this.set_attr($(el).attr('id'), 'orig-cls', 'class', c, v);
          }
          return true;
        }
      };
    };

    /* INSTANCE METHODS
    */


    function OPC(config) {
      var idx, oc, _i, _len, _ref,
        _this = this;
      this.config = config;
      this.set_value = function(tag, prop, val) {
        return OPC.prototype.set_value.apply(_this, arguments);
      };
      this.root_elem = this.config.root_elem != null ? $(this.config.root_elem) : $("body");
      this.root_tag = this.root_elem.selector;
      this.set_val_ops();
      if (this.config == null) {
        throw "Missing configuration";
      }
      _ref = OPC.connections;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        oc = _ref[idx];
        if (oc.root_elem === this.root_elem) {
          OPC.connections.splice(idx, 1);
          break;
        }
      }
      this.init(this.config);
      this;
    }

    OPC.prototype.init = function(config) {
      var tg, tv, wt, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.toggle_refresh(false);
      if (config != null) {
        this.config = config;
      }
      if (this.config == null) {
        this.config = window.OPC_config;
      }
      if (this.config == null) {
        this.config = {};
      }
      this.tags = {};
      this.elems = [];
      this.cache = {};
      this.interval = this.config.interval != null ? this.config.interval : OPC.interval;
      this.debug = this.config.debug != null ? this.config.debug : true;
      this.debug_refresh = this.config.debug_refresh != null ? this.config.debug_refresh : false;
      this.auto_start = this.config.auto_start != null ? this.config.auto_start : true;
      this.token = this.config.token != null ? this.config.token : void 0;
      this.serverURL = this.config.serverURL != null ? this.config.serverURL : OPC.serverURL;
      this.locale = this.config.locale != null ? this.config.locale : 'us';
      this.trend_bindings = this.config.trend_bindings != null ? this.config.trend_bindings : [];
      this.alarm_bindings = this.config.alarm_bindings != null ? this.config.alarm_bindings : [];
      this.refresh_callback = this.config.refresh_callback;
      this.tag_prefix = this.config.tag_prefix != null ? this.config.tag_prefix : '';
      this.max_tags_per_msg = this.config.max_tags_per_msg != null ? this.config.max_tags_per_msg : 0;
      this.reload_interval = this.config.reload_interval != null ? this.config.reload_interval : 0;
      this.callback_timeout = this.config.callback_timeout != null ? this.config.callback_timeout : null;
      this.max_callbacks = this.config.max_callbacks != null ? this.config.max_callbacks : OPC.max_callbacks;
      if (OPC.max_callbacks < this.max_callbacks) {
        OPC.max_callbacks = this.max_callbacks;
      }
      if ((this.config.watch_tags != null) && this.config.watch_tags.length > 0) {
        if (this.config.tags == null) {
          this.config.tags = [];
        }
        _ref = this.config.watch_tags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          wt = _ref[_i];
          tv = this.parse_tag_prop(wt);
          this.config.tags.push({
            name: tv[0],
            props: [
              {
                name: tv[1]
              }
            ]
          });
        }
      }
      if ((this.config.tags != null) && this.config.tags.length > 0) {
        if (this.tag_prefix != null) {
          _ref1 = this.config.tags;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            tg = _ref1[_j];
            tg.name = tg.ignore_prefix ? tg.name : "" + this.tag_prefix + tg.name;
          }
        }
        this.add_tags(this.config.tags);
        this.log("initilization, config.tags: " + this.config.tags.length);
      }
      if ((document.location != null) && document.location.protocol === 'ms-appx:') {
        this.app_url = document.location.protocol + "//" + document.location.host;
        this.iframe_id = this.config.iframe_id != null ? this.config.iframe_id : "opc_rt_iframe";
        $(document).ready(function() {
          var add_event_listener, event_name, ifr, message_event;
          ifr = $("#" + _this.iframe_id);
          if (ifr.length === 0) {
            $("body").append($("<iframe id='" + _this.iframe_id + "' style='position:absolute;top:-1000px;left:-1000px;width:0;height:0;background-color:transparent;'></iframe>"));
          } else {
            $(ifr).css("position", "absolute").css("top", "-1000px").css("left", "-1000px");
            $(ifr).width(0).height(0).css("background-color", "transparent");
          }
          $("#" + _this.iframe_id).load(function() {
            var difr, msg;
            difr = document.getElementById("" + _this.iframe_id);
            msg = {
              type: "init",
              parent_url: _this.app_url
            };
            difr.contentWindow.postMessage(JSON.stringify(msg), "*");
            return true;
          });
          $(ifr).attr("src", "ms-appx-web:///" + _this.iframe_id + ".html");
          event_name = window.addEventListener != null ? "addEventListener" : "attachEvent";
          add_event_listener = window[event_name];
          message_event = event_name === "attachEvent" ? "onmessage" : "message";
          add_event_listener(message_event, function(e) {
            var data;
            if (e.data) {
              data = JSON.parse(e.data);
              if (data.tags) {
                return _this.refresh_data(data, data.cid);
              }
            }
          }, false);
          return true;
        });
      }
      OPC.Alarm.init_alarms(this);
      OPC.Trend.init_trends(this);
      this.scan_document();
      OPC.connections.push(this);
      return this;
    };

    OPC.prototype.log = function() {
      var larr;
      if (!this.debug || (typeof console === "undefined" || console === null) || (console.log == null)) {
        return false;
      }
      larr = Array.prototype.slice.call(arguments);
      larr.splice(0, 0, "OPC.log");
      console.log(larr);
      return this;
    };

    OPC.prototype.log_err = function(msg, err) {
      var stack;
      stack = err.stack != null ? err.stack : "";
      msg = msg == null ? "<<ERROR>>" : "<< " + msg + " >>";
      this.log("" + msg + "\n===\n" + err.message + "\n===\n" + stack);
      return this;
    };

    OPC.prototype.restart_refresh = function() {
      if (this.auto_start || ((this.token != null) && this.token !== '')) {
        this.toggle_refresh(true);
      }
      return this;
    };

    OPC.prototype.scan_document = function() {
      var attr, cattr, curr_id, inline_groups, inline_sets, inline_tags, matched, t, tcount,
        _this = this;
      this.toggle_refresh(false);
      inline_tags = [];
      inline_groups = [];
      inline_sets = [];
      matched = false;
      curr_id = '';
      for (attr in this.val_ops) {
        cattr = "opc-tag-" + attr;
        $("[" + cattr + "]", this.root_elem).each(function(i, e) {
          var t, temp, temp2, tp, v, vi, _i, _len, _ref;
          try {
            curr_id = "#" + ($(e).attr('id'));
            v = $.parseJSON($(e).attr(cattr));
            if (v.tag != null) {
              tp = _this.parse_tag_prop(v.tag);
              if (tp.length === 2) {
                t = v.ignore_prefix ? tp[0] : "" + _this.tag_prefix + tp[0];
                temp = {
                  name: t,
                  props: [
                    {
                      name: tp[1],
                      elems: [
                        {
                          sel: "" + curr_id,
                          acts: [
                            {
                              type: attr,
                              config: v.config
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  ignore_prefix: v.ignore_prefix
                };
                if (attr === 'set') {
                  inline_sets.push(temp);
                  temp2 = $.extend(true, {}, temp);
                  temp2.props = [
                    {
                      name: [tp[1]]
                    }
                  ];
                  inline_tags.push(temp2);
                } else {
                  inline_tags.push(temp);
                }
                return matched = true;
              }
            } else if ((v.type != null) && (v.type === 'comp' || v.type === 'group')) {
              temp = {
                type: attr,
                sel: "" + curr_id,
                vals: [],
                ignore_prefix: v.ignore_prefix
              };
              if (v.type === 'group' && (v.group != null) && v.group.length > 0) {
                temp.bad_q = v.bad_q;
                temp.all_f = v.all_f;
                _ref = v.group;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  vi = _ref[_i];
                  if (vi.tag != null) {
                    tp = _this.parse_tag_prop(vi.tag);
                    if (tp.length === 2) {
                      t = v.ignore_prefix ? tp[0] : "" + _this.tag_prefix + tp[0];
                      temp.vals.push({
                        tag: t,
                        prop: tp[1],
                        config: vi.config
                      });
                    }
                  }
                }
              } else if (v.type === 'comp' && (v.tag1 != null) && (v.tag2 != null) && (v.op != null)) {
                temp.vals.push({
                  tag1: v.tag1,
                  tag2: v.tag2,
                  op: v.op,
                  config: v.config
                });
              }
              if (temp.vals.length > 0) {
                inline_groups.push(temp);
                return matched = true;
              }
            }
          } catch (err) {
            return _this.log_err("Error parsing tag [" + attr + "] on [" + curr_id + "]", err);
          }
        });
      }
      this.add_tags(inline_tags);
      this.add_elems(inline_groups);
      this.bind_sets(inline_sets);
      tcount = 0;
      for (t in this.tags) {
        tcount++;
      }
      this.log("Scanning of [" + this.root_tag + "] done. total tags: " + tcount);
      this.restart_refresh();
      return true;
    };

    OPC.prototype.stop_interval = function(h) {
      if ((this.intervals != null) && (this.intervals[h] != null)) {
        this.intervals[h] = null;
      }
      return true;
    };

    OPC.prototype.clear_interval = function(h) {
      if (this.active_interval[h] != null) {
        clearTimeout(this.active_interval[h]);
        this.active_interval[h] = null;
      }
      return true;
    };

    OPC.prototype.run_interval = function(func, wait, h) {
      var interv,
        _this = this;
      if (this.intervals == null) {
        this.intervals = {};
      }
      if (this.active_interval == null) {
        this.active_interval = {};
      }
      this.intervals[h] = 1;
      interv = (function(w, h) {
        return function() {
          if ((_this.intervals != null) && (_this.intervals[h] != null)) {
            _this.clear_interval(h);
            _this.active_interval[h] = setTimeout(interv, w);
            try {
              func.call(_this);
            } catch (e) {

            }
          }
          return true;
        };
      })(wait, h);
      return interv(wait, h);
    };

    OPC.prototype.is_refreshing = function() {
      return (this.intervals != null) && this.intervals['timer'];
    };

    OPC.prototype.toggle_refresh = function(start) {
      var _this = this;
      if (!start) {
        this.stop_interval("timer");
        return false;
      }
      start = ((this.interval != null) && this.interval > 0) && (start != null ? start : !this.is_refreshing);
      if (!start && !this.is_refreshing) {
        return;
      }
      if (start) {
        this.refresh();
        this.run_interval(this.refresh, this.interval, "timer");
        if ((this.reload_interval != null) && this.reload_interval > 0) {
          setTimeout(function() {
            return document.location.reload();
          }, this.reload_interval * 60000);
        }
      } else {
        this.stop_interval("timer");
      }
      return true;
    };

    OPC.prototype.parse_tag_prop = function(tagprop, p) {
      var i, t, tmp, tp, v, _i, _len;
      tagprop = p != null ? "" + tagprop + "." + p : tagprop;
      tp = $.trim(tagprop).split(".");
      for (i = _i = 0, _len = tp.length; _i < _len; i = ++_i) {
        t = tp[i];
        tp[i] = $.trim(t);
      }
      if (tp.length > 2) {
        tmp = tp.slice(0);
        v = tmp.splice(tp.length - 1, 1);
        tp = [tmp.join('.'), v[0]];
      }
      return tp;
    };

    OPC.prototype.get_tag_json = function(tag, prop, val) {
      var np, nt, p, t, tData, tp;
      tp = this.parse_tag_prop(tag, prop);
      if (val === void 0 && tp.length === 2) {
        tag = tp[0];
        prop = tp[1];
      }
      tData = {
        "tags": []
      };
      for (t in this.tags) {
        if ((tag == null) || t === tag) {
          nt = {
            "name": t,
            "props": []
          };
          for (p in this.tags[t].props) {
            if ((prop == null) || p === prop) {
              np = {
                "name": p,
                "val": val
              };
              nt.props.push(np);
            }
          }
          tData.tags.push(nt);
        }
      }
      return tData;
    };

    OPC.prototype.build_tag_json = function(tags) {
      var nt, op, ot, pfound, pn, t, tData, tn, tp, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      tData = {
        "tags": []
      };
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        tp = this.parse_tag_prop(t);
        if (tp.length !== 2) {
          continue;
        }
        tn = tp[0];
        pn = tp[1];
        nt = null;
        _ref = tData.tags;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          ot = _ref[_j];
          if (ot.name === tn) {
            nt = ot;
            _ref1 = ot.props;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              op = _ref1[_k];
              pfound = false;
              if (op.name === pn) {
                pfound = true;
                break;
              }
              if (!pfound) {
                ot.props.push({
                  name: pn,
                  val: null
                });
              }
            }
            break;
          }
        }
        if (nt == null) {
          tData.tags.push({
            name: tn,
            props: [
              {
                name: pn,
                val: null
              }
            ]
          });
        }
      }
      return tData;
    };

    OPC.prototype.refresh_data = function(data, cid) {
      if (this.debug_refresh) {
        this.log(data);
      }
      this.read_tags(data.tags, cid);
      this.set_elems();
      // removed refresh_callback duplicate
      return true;
    };

    OPC.prototype.dummy_msg = function(tagset) {
      var str, testmsg, testurl;
      testmsg = {
        status: 'OK',
        message: '',
        tags: tagset
      };
      str = JSON.stringify(testmsg);
      testurl = "getdata?callback=opcwebcb_000000&_=0000000000000&message=" + encodeURI(str);
      return testurl;
    };

    OPC.prototype.refresh = function() {
      var ab, cid, d, i, idx, t, tagset, tagsets, tb, ts, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2,
        _this = this;
      if (this.alarm_bindings != null) {
        _ref = this.alarm_bindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ab = _ref[_i];
          ab.refresh_data();
        }
      }
      if (this.trend_bindings != null) {
        _ref1 = this.trend_bindings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tb = _ref1[_j];
          tb.refresh_data();
        }
      }
      d = this.get_tag_json();
      tagsets = [];
      tagset = [];
      _ref2 = d.tags;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        t = _ref2[i];
        if (tagset.length < this.max_tags_per_msg || this.max_tags_per_msg === 0) {
          tagset.push(t);
          if (tagset.length === this.max_tags_per_msg && i !== d.tags.length - 1) {
            tagsets.push(tagset);
            tagset = [];
          }
        }
      }
      if (tagset.length > 0) {
        tagsets.push(tagset);
      }
      if (OPC.pending_callbacks + tagsets.length <= OPC.max_callbacks) {
        for (idx = _l = 0, _len3 = tagsets.length; _l < _len3; idx = ++_l) {
          ts = tagsets[idx];
          d.tags = ts;
          d.status = "OK";
          d.message = "";
          cid = OPC.callback_id++;
          this.get({
            url: '/getdata',
            data: d,
            cid: cid,
            success: (function(cid) {
              return function(data, xhr) {
                _this.refresh_data(data, cid, _this);
                if (_this.refresh_callback != null) {
                  _this.refresh_callback(data, _this);
                }
                return true;
              };
            })(cid),
            error: (function(cid) {
              return function(res) {
                _this.log("REFRESH ERROR: callback: " + cid + " | status: " + res.status + ", " + res.statusText);
                return true;
              };
            })(cid)
          });
        }
      }
      d = null;
      return true;
    };

    OPC.prototype.load_tags = function(tags, success, error) {
      var cid, d, i, idx, j, t, tagset, tagsets, ts, _i, _j, _len, _len1, _ref,
        _this = this;
      j = this.build_tag_json(tags);
      tagsets = [];
      tagset = [];
      _ref = j.tags;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        t = _ref[i];
        if (tagset.length < this.max_tags_per_msg || this.max_tags_per_msg === 0) {
          tagset.push(t);
          if (tagset.length === this.max_tags_per_msg && i !== d.tags.length - 1) {
            tagsets.push(tagset);
            tagset = [];
          }
        }
      }
      if (tagset.length > 0) {
        tagsets.push(tagset);
      }
      d = {};
      for (idx = _j = 0, _len1 = tagsets.length; _j < _len1; idx = ++_j) {
        ts = tagsets[idx];
        d.tags = ts;
        d.status = "OK";
        d.message = "";
        cid = OPC.callback_id++;
        this.get({
          url: '/getdata',
          data: d,
          cid: cid,
          success: (function(cid) {
            return function(data, xhr) {
              if (success != null) {
                success(data);
              }
              return true;
            };
          })(cid),
          error: (function(cid) {
            return function(res) {
              if (error) {
                error(res);
              }
              return true;
            };
          })(cid)
        });
      }
      d = null;
      return true;
    };

    OPC.prototype.get_trend_binding = function(cid) {
      return this.Trend.get_binding(cid);
    };

    OPC.prototype.get_history_data = function(tb, sd, ed) {
      return this.Trend.get_history_data(tb, sd, ed);
    };

    OPC.prototype.resume_trend_data = function(tb) {
      return this.Trend.resume_trend_data(tb);
    };

    OPC.prototype.set_val = function(tag, prop, val) {
      return this.set_value(tag, prop, val);
    };

    OPC.prototype.set_value = function(tag, prop, val) {
      var cid, d, tp,
        _this = this;
      tp = val != null ? this.parse_tag_prop(tag, prop) : this.parse_tag_prop(tag);
      if (val === void 0 && tp.length === 2) {
        val = prop;
        tag = tp[0];
        prop = tp[1];
      }
      d = this.get_tag_json(tag, prop, val);
      d.status = "OK";
      d.message = "";
      cid = OPC.callback_id++;
      this.get({
        url: '/setdata',
        data: d,
        cid: cid,
        success: (function(cid) {
          return function(data, xhr) {
            if (_this.debug_refresh) {
              _this.log(data);
            }
            return true;
          };
        })(cid),
        error: (function(cid) {
          return function(res) {
            return _this.log("SET VALUE ERROR: " + res.status + ", " + res.statusText);
          };
        })(cid)
      });
      return true;
    };

    OPC.prototype.authenticate = function(un, pw, succ, err) {
      var cid,
        _this = this;
      this.toggle_refresh(false);
      cid = OPC.callback_id++;
      this.auth_s = succ;
      this.auth_e = err;
      this.get({
        url: '/gettoken',
        data: {
          un: un != null ? un : '',
          pw: pw != null ? pw : ''
        },
        cid: cid,
        success: (function(cid) {
          return function(data, xhr) {
            _this.token = data.message;
            if (_this.debug_refresh) {
              _this.log(data);
            }
            if ((_this.token != null) && _this.token !== '') {
              if (_this.auth_s != null) {
                _this.auth_s(_this.token);
                _this.auth_s = null;
              }
              _this.toggle_refresh(true);
            }
            return true;
          };
        })(cid),
        error: (function(cid) {
          return function(res) {
            _this.log("GET TOKEN ERROR: " + res.status + ", " + res.statusText);
            _this.token = "AUTH FAILURE";
            if (_this.auth_e != null) {
              _this.auth_e(_this.token);
              return _this.auth_e = null;
            }
          };
        })(cid)
      });
      return true;
    };

    OPC.prototype.get = function(params) {
      var ct, data, ifr, msg, req, timeout,
        _this = this;
      ct = 'application/json; charset=utf-8';
      params.data.token = this.token;
      msg = typeof params.data === 'string' ? params.data : JSON.stringify(params.data);
      data = {
        message: msg
      };
      timeout = this.callback_timeout != null ? this.callback_timeout : 30000;
      if (this.app_url && this.app_url !== "") {
        msg = {
          type: "json",
          data: data,
          url: this.serverURL + "/OPCREST" + params.url,
          cid: OPC.callback_id++
        };
        ifr = document.getElementById("" + this.iframe_id);
        if (ifr != null) {
          ifr.contentWindow.postMessage(JSON.stringify(msg), "*");
        }
        msg = null;
      } else {
        req = $.ajax({
          url: "" + this.serverURL + "/OPCREST" + params.url,
          dataType: params.dataType != null ? params.dataType : 'jsonp',
          contentType: params.contentType != null ? params.contentType : ct,
          data: data,
          jsonpCallback: "opcwebcb_" + params.cid,
          timeout: timeout,
          complete: (function(cid) {
            return function(sxr, status) {
              return OPC.clean_callback(cid);
            };
          })(params.cid)
        });
        req.success(params.success);
        req.error(params.error);
        OPC.pending_callbacks += 1;
      }
      return true;
    };

    OPC.prototype.read_tags = function(tags, cid) {
      var p, t, _i, _j, _len, _len1, _ref;
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _ref = t.props;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          p = _ref[_j];
          if (this.debug_refresh) {
            this.log("cid:" + cid + " " + t.name + "." + p.name + ": " + p.val + " datatype:" + p.datatype);
          }
          this.read_tag(t.name, p.name, p.val, p.qual, p.datatype, cid, this);
          true;
        }
        true;
      }
      return true;
    };

    OPC.prototype.read_tag = function(tag, prop, val, q, dt, cid) {
      var t;
      t = this.tags[tag];
      if (t != null) {
        return t.read_prop(prop, val, q, dt, cid);
      }
    };

    OPC.prototype.set_elems = function() {
      var e, elm;
      for (e in this.elems) {
        elm = this.elems[e];
        elm.set_groups();
        elm.set_comps();
      }
      return true;
    };

    OPC.prototype.add_tags = function(tags) {
      var nm, nt, t, _i, _len;
      if ((tags == null) || tags.length === 0) {
        return false;
      }
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        nt = tags[_i];
        if ((nt.name == null) || (nt.props == null)) {
          continue;
        }
        nm = nt.name;
        t = this.tags[nm];
        if (t != null) {
          t.add_props(nt.props);
        } else {
          this.tags[nm] = new OPC.Tag({
            name: nm,
            props: nt.props,
            conn: this
          });
        }
      }
      return true;
    };

    OPC.prototype.get_tag_config = function(tag, prop) {
      var c, tp;
      c = {
        name: "",
        props: [
          {
            name: "",
            elems: []
          }
        ]
      };
      tp = this.parse_tag_prop(tag, prop);
      if (tp.length === 2) {
        c.name = tp[0];
        c.props[0].name = tp[1];
      } else if ((tag != null) && (prop != null)) {
        c.name = tag;
        c.props[0].name = prop;
      }
      return c;
    };

    OPC.prototype.ubind_sets = function(tags) {
      var elem, p, prop, s, t, tag, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        t = tag.name;
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = tag.props;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            prop = _ref[_j];
            p = prop.name;
            _results1.push((function() {
              var _k, _len2, _ref1, _results2;
              _ref1 = prop.elems;
              _results2 = [];
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                elem = _ref1[_k];
                s = elem.sel;
                if ((s == null) || $(s, this.root_elem).length === 0) {
                  continue;
                }
                _results2.push($(s, this.root_elem).unbind(".OPCEvents"));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    OPC.prototype.bind_sets = function(tags) {
      var a, elem, p, prop, s, t, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2,
        _this = this;
      if ((tags == null) || tags.length === 0) {
        return false;
      }
      this.ubind_sets(tags);
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        t = tag.name;
        _ref = tag.props;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          prop = _ref[_j];
          p = prop.name;
          _ref1 = prop.elems;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            elem = _ref1[_k];
            s = elem.sel;
            if ((s == null) || $(s, this.root_elem).length === 0) {
              continue;
            }
            _ref2 = elem.acts;
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              a = _ref2[_l];
              if ((a.config != null) && (a.config.evt != null) && (a.config.set != null)) {
                switch (a.config.evt) {
                  case 'click':
                    (function(t, p, cfg) {
                      var ch;
                      ch = function(e) {
                        _this.val_ops['set'](t, p, cfg, $(e.target));
                        return true;
                      };
                      return $(s, _this.root_elem).bind("click.OPCEvents", ch);
                    })(t, p, a.config);
                    break;
                  case 'change':
                    (function(t, p, cfg) {
                      var chg;
                      chg = function() {
                        _this.val_ops['set'](t, p, cfg, $(e.target));
                        return true;
                      };
                      return $(s, _this.root_elem).bind("change.OPCEvents", chg);
                    })(t, p, a.config);
                }
              }
            }
          }
        }
      }
      return true;
    };

    OPC.prototype.add_elems = function(elems) {
      var c, e, ne, tags, v, _i, _j, _len, _len1, _ref;
      if ((elems == null) || elems.length === 0) {
        return false;
      }
      tags = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        ne = elems[_i];
        e = this.elems[ne.sel];
        c = {
          sel: ne.sel,
          bad_q: ne.bad_q,
          all_f: ne.all_f,
          conn: this
        };
        if ((ne.vals != null) && ne.vals.length > 0) {
          c.vals = {};
          c.vals[ne.type] = ne.vals;
          _ref = ne.vals;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            v = _ref[_j];
            if (v.tag1 != null) {
              tags.push(this.get_tag_config(v.tag1));
              tags.push(this.get_tag_config(v.tag2));
            } else {
              tags.push(this.get_tag_config(v.tag, v.prop));
            }
          }
          if (e != null) {
            e.add_groups(c);
          } else {
            this.elems[ne.sel] = new OPC.Elem(c);
          }
        }
        if (tags.length > 0) {
          this.add_tags(tags);
        }
      }
      return true;
    };

    OPC.prototype.set_cache = function(obj_id, key, val) {
      var obj;
      obj = this.cache[obj_id];
      if (obj == null) {
        obj = {};
        this.cache[obj_id] = obj;
      }
      obj[key] = val;
      return val;
    };

    OPC.prototype.get_cache = function(obj_id, key) {
      var obj;
      obj = this.cache[obj_id];
      if (obj == null) {
        obj = {};
        this.cache[obj_id] = obj;
      }
      return obj[key];
    };

    OPC.prototype.get_value = function(tag, prop) {
      var p, t, tp;
      if (tag == null) {
        return null;
      }
      tp = this.parse_tag_prop(tag, prop);
      if (tp.length === 2) {
        tag = tp[0];
        prop = tp[1];
      }
      t = this.tags[$.trim(tag)];
      p = t != null ? t.props[$.trim(prop)] : null;
      if (p != null) {
        return p.val;
      } else {
        return null;
      }
    };

    OPC.prototype.set_styles = function(id, src, styles) {
      var k, kv, s, sarr, v, _i, _len;
      sarr = styles.split(';');
      for (_i = 0, _len = sarr.length; _i < _len; _i++) {
        s = sarr[_i];
        s = $.trim(s);
        if (s === '') {
          continue;
        }
        kv = s.split(':');
        k = kv[0];
        if (kv.length > 2) {
          v = kv.slice(1).join(':');
        } else {
          v = kv[1];
        }
        this.set_style(id, k, src, v);
      }
      this.build_style(id);
      return true;
    };

    OPC.prototype.set_style = function(id, stl, src, val, build) {
      var c, co, i, _i, _len, _ref;
      co = this.get_styles(id, stl);
      _ref = co.vals;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c.src === src) {
          co.vals.splice(i, 1);
          break;
        }
      }
      co.vals.push({
        src: src,
        val: val
      });
      if (build) {
        this.build_style(id);
      }
      return true;
    };

    OPC.prototype.get_styles = function(id, stl, def) {
      var co, os;
      co = this.get_cache(id, stl);
      if (co == null) {
        os = def != null ? def : $("#" + id, this.root_elem).css(stl);
        co = {
          original: os,
          vals: []
        };
        this.set_cache(id, stl, co);
      }
      return co;
    };

    OPC.prototype.remove_styles = function(id, src) {
      var el, els, narr, s, v, _i, _len, _ref;
      el = this.cache[id];
      if (el == null) {
        return false;
      }
      for (s in el) {
        els = el[s];
        if ((els.vals != null) && els.vals.length > 0) {
          narr = [];
          _ref = els.vals;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            if (v.src !== src) {
              narr.push(v);
            }
          }
          els.vals = narr;
        }
      }
      this.build_style(id);
      return true;
    };

    OPC.prototype.build_style = function(id) {
      var attr, el, obj, s, v;
      el = $("#" + id, this.root_elem);
      obj = this.cache[id];
      if (obj != null) {
        for (s in obj) {
          attr = obj[s];
          v = attr.original;
          if ((attr.vals != null) && attr.vals.length > 0) {
            v = attr.vals[attr.vals.length - 1].val;
          }
          el.css(s, v);
        }
      }
      return true;
    };

    OPC.prototype.resolve_value = function(cfg, v) {
      var bad_q, gain, ofs, rate;
      rate = (cfg != null) && (cfg.rate != null) ? parseFloat(cfg.rate) : OPC.interval / 5;
      gain = (cfg != null) && (cfg.gain != null) ? parseFloat(cfg.gain) : 1;
      bad_q = (cfg != null) && (cfg.formats != null) && (cfg.formats.bad_q != null) ? parseFloat(cfg.formats.bad_q) : -1;
      ofs = (cfg != null) && (cfg.offset != null) ? parseFloat(cfg.offset) : 0;
      if (v != null) {
        v = (parseFloat(v) * gain) + ofs;
      } else {
        v = bad_q !== -1 ? bad_q : v;
      }
      return {
        val: v,
        rate: rate,
        gain: gain,
        offset: ofs,
        bad_q: bad_q
      };
    };

    OPC.prototype.format_data = function(v, dt, cfg, q) {
      var bv, dv, locale, nv;
      if ((cfg == null) || (cfg.formats == null)) {
        return v;
      }
      if ((v == null) || !q && (cfg.formats.bad_q != null)) {
        return cfg.formats.bad_q;
      }
      locale = cfg.formats['locale'] != null ? cfg.formats['locale'] : OPC.locale;
      switch (dt) {
        case "int":
          if (cfg.formats['int'] != null) {
            nv = parseInt(v);
            v = $.formatNumber(nv, {
              format: cfg.formats['int'],
              locale: locale
            });
          }
          break;
        case "float":
          if (cfg.formats['float'] != null) {
            nv = parseFloat(v);
            v = $.formatNumber(nv, {
              format: cfg.formats['float'],
              locale: locale
            });
          }
          break;
        case "boolean":
          bv = this.parseBool(v);
          if (bv && (cfg.formats.bool_t != null)) {
            v = cfg.formats.bool_t;
          } else if (!bv && (cfg.formats.bool_f != null)) {
            v = cfg.formats.bool_f;
          }
          break;
        case "datetime":
          if (cfg.formats['date'] != null) {
            dv = new Date(v);
            v = dv.toString(cfg.formats['date']);
          }
          break;
        case "string":
          if (cfg.formats.string != null) {
            return cfg.formats['string'].replace('{0}', v);
          }
          return v;
      }
      if (cfg.formats.string != null) {
        v = cfg.formats['string'].replace('{0}', v);
      }
      return v;
    };

    OPC.prototype.flash = function(el, src, val, stl) {
      var attr, cnt, rate, rpt, trg, v,
        _this = this;
      attr = src.type;
      rate = src.config.rate != null ? src.config.rate : 200;
      trg = src.config.trigger != null ? src.config.trigger : 'on_true';
      v = this.parseBool(val);
      if ((trg !== 'trans') && ((!v && (trg === 'on_true' || trg === 'trans_true')) || (v && (trg === 'on_false' || trg === 'trans_false')))) {
        if ($(el).attr(attr) != null) {
          $(el).attr(attr, -99);
          this.remove_styles($(el).attr('id'), src.type);
          $(el).dequeue(attr);
        }
        return;
      }
      if ($(el).attr(attr) == null) {
        $(el).attr(attr, 0);
      }
      cnt = parseInt($(el).attr(attr));
      if ($(el).attr(attr) != null) {
        cnt = parseInt($(el).attr(attr)) + 1;
        $(el).attr(attr, cnt);
      }
      if (trg !== 'on_true' && trg !== 'on_false' && (src.config.repeat != null)) {
        rpt = parseInt(src.config.repeat);
        if (rpt > 0 && cnt >= rpt * 2) {
          cnt = -99;
        }
      }
      if (cnt < 0) {
        $(el).removeAttr(attr);
        this.remove_styles($(el).attr('id'), src.type);
        return false;
      } else {
        if (cnt % 2 !== 0) {
          this.set_styles(el, src.type, src.config, true, stl);
        } else {
          this.remove_styles($(el).attr('id'), src.type);
        }
      }
      return $(el).delay(rate, attr).queue(attr, function() {
        return _this.flash(el, src, val, stl);
      }).dequeue(attr);
    };

    OPC.prototype.execute_fn = function(fn, args) {
      var context, func, i, namespaces, ns, _i, _len;
      args = Array.prototype.slice.call(arguments).splice(1);
      context = window;
      namespaces = fn.split('.');
      func = namespaces.pop();
      for (i = _i = 0, _len = namespaces.length; _i < _len; i = ++_i) {
        ns = namespaces[i];
        context = context[ns];
      }
      return context[func].apply(window, args);
    };

    OPC.prototype.set_styles = function(el, src, cfg, v, col_attr) {
      var id;
      if ((v == null) || (cfg == null)) {
        return false;
      }
      id = $(el).attr('id');
      this.remove_styles(id, src);
      if (cfg.cls != null) {
        $(el).toggleClass(cfg.cls, false);
      }
      if ((cfg.color != null) && (col_attr != null) && v) {
        this.set_style(id, col_attr, src, cfg.color, true);
      }
      if ((cfg.style != null) && v) {
        this.set_styles(id, src, cfg.style);
      }
      if (cfg.cls != null) {
        return $(el).toggleClass(cfg.cls, v);
      }
    };

    OPC.prototype.set_attr = function(obj_id, cache_key, attr, new_attr, val) {
      var curr, el, orig, v;
      orig = this.get_cache(obj_id, cache_key);
      el = $("#" + obj_id, this.root_elem);
      v = this.parseBool(val);
      if (orig == null) {
        curr = el.attr(attr);
        curr = curr != null ? curr : "";
        orig = this.set_cache(obj_id, cache_key, curr);
      }
      if (v) {
        el.attr(attr, new_attr);
      } else if (orig != null) {
        el.attr(attr, orig);
      } else {
        el.attr(attr, "");
      }
      return true;
    };

    OPC.prototype.parseBool = function(v) {
      var tv;
      tv = false;
      if (v != null) {
        tv = ($.trim(v.toString().toLowerCase()) === 'true') || (!isNaN(v) && parseFloat(v) > 0);
      }
      return tv;
    };

    return OPC;

  })();

  OPC.Util = (function() {

    function Util() {}

    Util.padleft = function(s, c, n) {
      var v;
      v = new Array(n + 1).join(c) + s;
      if (v.length > n) {
        v = v.slice(v.length - n);
      }
      return v;
    };

    Util.formatDate = function(dt, f) {
      var ap, date, dy, hrs, hrs_m, mins, mth, secs, time, yr;
      yr = dt.getFullYear();
      mth = OPC.Util.padleft(dt.getMonth() + 1, "0", 2);
      dy = OPC.Util.padleft(dt.getDate(), "0", 2);
      date = mth + "/" + dy + "/" + yr;
      hrs_m = dt.getHours();
      mins = OPC.Util.padleft(dt.getMinutes(), "0", 2);
      secs = OPC.Util.padleft(dt.getSeconds(), "0", 2);
      ap = hrs_m >= 12 ? "pm" : "am";
      hrs = hrs_m;
      if (hrs > 12) {
        hrs = hrs - 12;
      } else if (hrs === 0) {
        hrs = 12;
      }
      hrs = OPC.Util.padleft(hrs, "0", 2);
      time = "" + hrs + ":" + mins + ":" + secs + " " + ap;
      f = f.replace('yyyy', "" + yr);
      f = f.replace('yy', ("" + yr).slice(2));
      f = f.replace('mm', mth);
      f = f.replace('dd', dy);
      f = f.replace('HH', hrs_m);
      f = f.replace('hh', hrs);
      f = f.replace('MM', mins);
      f = f.replace('ss', secs);
      f = f.replace('aa', "" + ap);
      return f;
    };

    return Util;

  })();

  /* 
  OPC.Tag : represents a Tag object
    name: Tag name
    props: hash of OPC.Prop
  
    Tags contain 0..n Props (properties)
    Props contain 0..n Elems
    Elems contain 0..n Actions
    Actions are rules that get executed when a Tag:Prop:value gets updated
  */


  OPC.Tag = (function() {

    function Tag(c) {
      this.name = c.name;
      this.conn = c.conn;
      this.props = {};
      if ((c.props != null) && c.props.length > 0) {
        this.add_props(c.props);
      }
      this;
    }

    Tag.prototype.add_props = function(props) {
      var np, p, _i, _len;
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        np = props[_i];
        if (np.name == null) {
          continue;
        }
        p = this.props[np.name];
        if (p != null) {
          p.add_elems(np.elems);
        } else {
          this.props[np.name] = new OPC.Prop({
            name: np.name,
            elems: np.elems,
            tag: this
          });
        }
      }
      return true;
    };

    Tag.prototype.read_prop = function(prop, val, qual, dt, cid) {
      var p;
      p = this.props[prop];
      if (p != null) {
        return p.read_val(val, qual, dt, cid);
      }
      return false;
    };

    return Tag;

  })();

  /*
  OPC.Prop : represents a Tag.Property
    name: property name
    elems: hash of OPC.Elem
    val: the last value the property was set to
  */


  OPC.Prop = (function() {

    function Prop(c) {
      this.name = c.name;
      this.elems = {};
      this.val = "";
      this.cid = -1;
      this.quality = true;
      this.data_type = "";
      this.tag = c.tag != null ? c.tag : null;
      this.conn = this.tag != null ? this.tag.conn : null;
      if ((c.elems != null) && c.elems.length > 0) {
        this.add_elems(c.elems);
      }
      this;
    }

    Prop.prototype.add_elems = function(elems) {
      var e, ne, _i, _len;
      if (elems == null) {
        return;
      }
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        ne = elems[_i];
        if (ne.ref != null) {
          ne.sel = "#" + $(ne.ref).attr("id");
        }
        if ((ne.sel == null) || ne.sel === "#" || (ne.acts == null)) {
          continue;
        }
        e = this.elems[ne.sel];
        if (e != null) {
          e.add_acts(ne.acts);
        } else {
          e = new OPC.Elem({
            sel: ne.sel,
            acts: ne.acts,
            conn: this.conn
          });
          this.elems[ne.sel] = e;
        }
      }
      return true;
    };

    Prop.prototype.read_val = function(val, qual, dt, cid) {
      var e, tVal;
      tVal = val == null ? null : val.toString();
      this.val = tVal;
      this.quality = (val != null) && val !== "";
      this.data_type = dt;
      this.cid = cid;
      for (e in this.elems) {
        this.elems[e].read_val(val, dt, this.quality);
      }
      return true;
    };

    return Prop;

  })();

  /* 
  OPC.Elem
    sel: selector - allows you to bind an action to 1..n DOM elems
    acts: array of actions
  */


  OPC.Elem = (function() {

    function Elem(c) {
      this.ignore_prefix = c.ignore_prefix;
      this.sel = c.sel;
      this.add_acts(c.acts);
      this.add_groups(c);
      this.conn = c.conn;
      this;
    }

    Elem.prototype.add_acts = function(na) {
      var a, _i, _len;
      if ((na == null) || na.length === 0) {
        return false;
      }
      if (this.acts == null) {
        this.acts = [];
      }
      for (_i = 0, _len = na.length; _i < _len; _i++) {
        a = na[_i];
        if ((a != null) && (a.type != null)) {
          this.acts.push(a);
        }
      }
      return true;
    };

    Elem.prototype.add_groups = function(c) {
      var gp, nv;
      if ((c == null) || (c.vals == null) || c.vals.length < 1) {
        return false;
      }
      if (this.groups == null) {
        this.groups = {};
      }
      for (nv in c.vals) {
        gp = {
          bad_q: c.bad_q,
          all_f: c.all_f,
          vals: c.vals[nv]
        };
        this.groups[nv] = gp;
      }
      return true;
    };

    Elem.prototype.add_comps = function(ncs) {
      var nc;
      if (ncs == null) {
        return false;
      }
      if (this.comps == null) {
        this.comps = {};
      }
      for (nc in ncs) {
        this.comps[nc] = ncs[nc];
      }
      return true;
    };

    Elem.prototype.read_val = function(val, dt, qual) {
      var a, els, fn, root, se, _i, _j, _len, _len1, _ref;
      root = this.conn != null ? this.conn.root_elem : null;
      els = $(this.sel, root);
      if (els.length > 0) {
        _ref = this.acts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          fn = this.conn.val_ops[a.type];
          if (fn != null) {
            for (_j = 0, _len1 = els.length; _j < _len1; _j++) {
              se = els[_j];
              fn(a, se, val, dt, qual);
            }
          }
        }
        return true;
      } else {
        return false;
      }
    };

    Elem.prototype.set_groups = function() {
      var bv, c, els, g, grp, q, tp, v, val, _i, _len, _ref;
      if ((this.sel == null) || $(this.sel, this.root_elem).length === 0) {
        return false;
      }
      els = $(this.sel, this.root_elem);
      for (g in this.groups) {
        grp = this.groups[g];
        c = null;
        v = false;
        q = true;
        _ref = grp.vals;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tp = _ref[_i];
          val = this.conn.get_value(tp.tag, tp.prop);
          bv = this.conn.parseBool(val);
          if ((grp.bad_q != null) && ((val == null) || val === "")) {
            q = false;
          } else if (((tp.tag != null) && bv) || ((tp.tag1 != null) && (tp.tag2 != null) && (tp.op != null) && this.test_comp(tp.tag1, tp.tag2, tp.op))) {
            c = c != null ? c : tp.config;
            v = v || true;
          }
          this.conn.val_ops[g]({
            config: tp.config
          }, this.sel, false);
        }
        if ((grp.bad_q != null)) {
          this.conn.val_ops[g]({
            config: grp.bad_q
          }, this.sel, false);
        }
        if ((grp.all_f != null)) {
          this.conn.val_ops[g]({
            config: grp.all_f
          }, this.sel, false);
        }
        if (!q) {
          c = grp.bad_q;
          v = true;
        } else if ((grp.all_f != null) && !v) {
          c = grp.all_f;
          v = true;
        }
        this.conn.val_ops[g]({
          config: c
        }, this.sel, v);
      }
      return true;
    };

    Elem.prototype.test_comp = function(t1, t2, op) {
      var v1, v2;
      v1 = this.conn.get_value(t1);
      v2 = this.conn.get_value(t2);
      if ((op === '=' && v1 === v2) || (op === '>' && v1 > v2) || (op === '>=' && v1 >= v2) || (op === '<' && v1 < v2) || (op === '<=' && v1 <= v2) || (op === '!=' && v1 !== v2)) {
        return true;
      } else {
        return false;
      }
    };

    Elem.prototype.set_comps = function() {
      var c, cm, cmp, els;
      if ((this.sel == null) || $(this.sel, this.root_elem).length === 0) {
        return false;
      }
      els = $(this.sel, this.root_elem);
      for (cm in this.comps) {
        cmp = this.comps[cm];
        c = this.test_comp(cmp.tag1, cmp.tag2, cmp.op);
      }
      return true;
    };

    return Elem;

  })();

  OPC.Modal = (function() {

    function Modal(config) {
      var b, btn, cls, cnt, d, i, inp, msg, _i, _len, _ref,
        _this = this;
      this.config = config;
      this.close = function() {
        return Modal.prototype.close.apply(_this, arguments);
      };
      if ($("#opc-modal-overlay").length > 0) {
        return false;
      }
      this.overlay = $('<div id="opc-modal-overlay"></div>');
      $('body').append(this.overlay);
      if (this.config.id == null) {
        this.config.id = 'opc-modal';
      }
      cls = this.config.cls != null ? this.config.cls : '';
      inp = "<input type='text' id='opc-modal-val' value='" + (OPC.get_value(this.config.tag, this.config.prop)) + "'/>";
      inp = this.config.contents != null ? this.config.contents : inp;
      msg = this.config.message != null ? "<div class='opc-modal-message'>" + this.config.message + "</div>" : '';
      d = "    <div class='opc-modal-dialog " + cls + "' id='" + this.config.id + "' style='display:none;'>     <div class='opc-modal-title' >" + this.config.title + "</div>     " + msg + "     <div class='opc-modal-message' id='opc-modal-input' style='display:none;'>" + inp + "</div>     <div class='opc-modal-buttons'></div>    </div>";
      this.isvalid = true;
      this.dialog = $(d);
      $('body').append(this.dialog);
      if (this.config.val != null) {
        $('#opc-modal-val').val(this.config.val);
      }
      if (this.config.buttons == null) {
        this.config.buttons = [];
        this.config.buttons.push({
          text: 'OK'
        });
      }
      _ref = this.config.buttons;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        b = _ref[i];
        cnt = this.dialog.find(".opc-modal-buttons");
        cnt.append($("<button id='button_" + i + "'>" + b.text + "</button>"));
        btn = cnt.find("#button_" + i);
        if (b.defer_close) {
          btn.click(b.click);
        } else {
          btn.click(function(e) {
            var bb, bid, ii, _j, _len1, _ref1;
            bid = e.target.id;
            _ref1 = _this.config.buttons;
            for (ii = _j = 0, _len1 = _ref1.length; _j < _len1; ii = ++_j) {
              bb = _ref1[ii];
              if ((bb.click != null) && ("button_" + ii) === bid) {
                if (_this.config.tag != null) {
                  if (_this.isvalid) {
                    bb.click(_this.config.tag, _this.config.prop, $('#opc-modal-val').val());
                  } else {
                    return false;
                  }
                } else {
                  bb.click(_this);
                }
                break;
              }
            }
            _this.close();
            return true;
          });
        }
        if (this.config.show_input) {
          $('#opc-modal-input').show();
          if (this.config.validation != null) {
            inp = $("#opc-modal-val");
            if (this.config.validation === "boolean") {
              inp.keyup(function(e) {
                var v;
                v = $.trim(inp.val().toString().toLowerCase());
                _this.isvalid = v === 'true' || v === 'false';
                return inp.toggleClass('invalid', !_this.isvalid);
              });
            }
          }
        }
      }
      $(window).resize(function() {
        return _this.dialog.center();
      });
      this.dialog.center();
      this.overlay.fadeTo(200, 0.5);
      this.dialog.fadeTo(200, 1);
      this;
    }

    Modal.prototype.close = function() {
      this.dialog.fadeTo(100, 0, function() {
        return $(this).remove();
      });
      this.overlay.fadeTo(100, 0, function() {
        return $(this).remove();
      });
      return true;
    };

    return Modal;

  })();

  OPC.TrendRequest = (function() {

    function TrendRequest(tb, tags, historytags) {
      var stat, t, _i, _len, _ref;
      this.token = tb.connection.token;
      this.requesttype = tb.requesttype;
      this.chartinstanceguid = tb.guid;
      this.samplerate = tb.samplerate;
      this.timeframe = tb.timeframe;
      this.tagnames = tags != null ? tags : [];
      this.historytagnames = historytags != null ? historytags : [];
      this.starthistorydate = tb.starthistorydate;
      this.endhistorydate = tb.endhistorydate;
      this.returnalldatawithtimes = tb.returnalldatawithtimes != null ? tb.returnalldatawithtimes : false;
      this.historystatprocessing = [];
      _ref = tb.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (typeof t === "string") {
          this.historystatprocessing.push('avg');
        } else if (typeof t === "object" && (t.tag != null)) {
          stat = t.historystatprocessing != null ? t.historystatprocessing : 'avg';
          this.historystatprocessing.push(stat);
        }
      }
    }

    return TrendRequest;

  })();

  OPC.Trend = (function() {

    function Trend() {}

    Trend.init_trends = function(oc) {
      var tb, tbs, _i, _len, _ref;
      tbs = [];
      _ref = oc.trend_bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tb = _ref[_i];
        tb = new OPC.Trend.Binding(tb, oc);
        tbs.push(tb);
      }
      oc.trend_bindings = tbs;
      return tbs;
    };

    Trend.getTrendBinding = function(data) {
      var oc, tb, _i, _j, _len, _len1, _ref, _ref1;
      _ref = OPC.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oc = _ref[_i];
        _ref1 = oc.trend_bindings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tb = _ref1[_j];
          if (tb.guid === data.chartinstanceguid) {
            return tb;
          }
        }
      }
      return null;
    };

    Trend.getHistoryData = function(tb, sd, ed) {
      return OPC.Trend.get_history_data(tb, sd, ed);
    };

    Trend.resumeTrendData = function(tb) {
      return OPC.Trend.resume_trend_data(tb);
    };

    Trend.get_binding = function(cid) {
      var oc, t, _i, _j, _len, _len1, _ref, _ref1;
      if (typeof cid !== 'string') {
        return cid;
      }
      _ref = OPC.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oc = _ref[_i];
        _ref1 = oc.trend_bindings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          t = _ref1[_j];
          if ((t.chartid != null) && t.chartid === cid) {
            return t;
          }
        }
      }
      return null;
    };

    Trend.get_history_data = function(tb, sd, ed) {
      sd = typeof sd === 'string' ? new Date(sd) : sd;
      ed = typeof ed === 'string' ? new Date(ed) : ed;
      tb = OPC.Trend.get_binding(tb);
      if (tb == null) {
        return false;
      }
      tb.mode = "history";
      tb.starthistorydate = sd.getTime();
      tb.endhistorydate = ed.getTime();
      tb.requesttype = "HistoryRequest";
      tb.trend_data = tb.trend_data != null ? tb.trend_data : tb.data;
      tb.trend_retain = tb.trend_retain != null ? tb.trend_retain : tb.retain;
      tb.retain = null;
      tb.data = null;
      return true;
    };

    Trend.resume_trend_data = function(tb) {
      tb = OPC.Trend.get_binding(tb);
      if ((tb == null) || tb.mode !== "history") {
        return false;
      }
      tb.mode = "trend";
      tb.guid = null;
      tb.data = tb.trend_data;
      tb.retain = tb.trend_retain;
      tb.requesttype = "RefreshData";
      delete tb["starthistorydate"];
      delete tb["endhistorydate"];
      delete tb["trend_data"];
      delete tb["trend_retain"];
      return true;
    };

    Trend.get_data = function(tb) {
      var historytags, tags, tdr, tn, _i, _len, _ref,
        _this = this;
      tags = [];
      historytags = [];
      _ref = tb.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tn = _ref[_i];
        if (typeof tn === "string") {
          tags.push(tn);
          historytags.push('');
        } else if (typeof tn === "object" && (tn.tag != null)) {
          tags.push(tn.tag);
          if (tn.historytag != null) {
            historytags.push(tn.historytag);
          } else {
            historytags.push('');
          }
        }
      }
      if (tags.length === 0) {
        return;
      }
      tdr = new OPC.TrendRequest(tb, tags, historytags);
      tb.cid = OPC.callback_id++;
      tb.connection.get({
        url: '/gettrenddata',
        data: tdr,
        cid: tb.cid,
        success: (function(cid) {
          return function(data, xhr) {
            console.log(data);
            tb.guid = data.chartinstanceguid;
            if (tb.requesttype === "HistoryRequest" || tb.requesttype === "HistoryData") {
              tb.requesttype = "HistoryData";
            } else {
              tb.requesttype = "NewData";
            }
            if ((data.penvalues != null) && data.firsttime > 0 && (tb.callback != null)) {
              data.firsttime = new Date(data.firsttime);
              data.lasttime = new Date(data.lasttime);
              tb.callback(data);
            }
            OPC.clean_callback(cid);
            return true;
          };
        })(tb.cid),
        error: function(res) {
          return OPC.log("REFRESH ERROR: " + res.status + ", " + res.statusText);
        }
      });
      return true;
    };

    return Trend;

  })();

  OPC.Trend.Binding = (function() {

    function Binding(c, conn) {
      this.connection = conn;
      this.chartid = c.chartid;
      this.callback = c.callback;
      this.samplerate = c.samplerate;
      this.timeframe = c.timeframe;
      this.retain = c.retain;
      this.tags = c.tags;
      this.starthistorydate = c.starthistorydate;
      this.endhistorydate = c.endhistorydate;
      this.returnalldatawithtimes = c.returnalldatawithtimes;
      this;
    }

    Binding.prototype.refresh_data = function() {
      if (this.requesttype == null) {
        this.requesttype = "";
      }
      if (this.guid != null) {
        if (this.requesttype !== "HistoryRequest" && this.requesttype !== "HistoryData") {
          this.requesttype = "NewData";
        }
      } else {
        this.guid = "";
      }
      if ((this.mode != null) && this.mode !== 'history') {
        this.mode = 'trend';
      }
      OPC.Trend.get_data(this);
      return true;
    };

    return Binding;

  })();

  OPC.Flot = (function() {

    function Flot() {}

    Flot.buildTrendData = function(data) {
      var ad, adv, b, bd, dt, fd, flotData, i, incr, midx, series, sidx, tag, tks, tn, tspan, v, _i, _j, _len, _len1, _ref;
      b = OPC.Trend.getTrendBinding(data);
      if (b === null) {
        return null;
      }
      midx = data.matchingindex;
      tspan = data.lasttime.getTime() - data.firsttime.getTime();
      incr = 0;
      if (data.numberofvalues > 1) {
        incr = tspan / (data.numberofvalues - 1);
      }
      flotData = [];
      ad = data.timesforreturnalldata;
      _ref = data.penvalues;
      for (sidx = _i = 0, _len = _ref.length; _i < _len; sidx = ++_i) {
        series = _ref[sidx];
        tag = b.tags[sidx];
        if (b.data == null) {
          b.data = {};
        }
        tn = "";
        if (typeof tag === "string") {
          tn = tag;
        } else if (typeof tag === "object" && (tag.tag != null)) {
          tn = tag.tag;
        }
        if (b.data[tn] == null) {
          b.data[tn] = [];
        }
        bd = b.data[tn];
        fd = {
          data: b.data[tn]
        };
        if (tag.color != null) {
          fd.color = tag.color;
        }
        if (tag.label != null) {
          fd.label = tag.label;
        }
        if (tag.lines != null) {
          fd.lines = tag.lines;
        }
        if (tag.bars != null) {
          fd.bars = tag.bars;
        }
        if (tag.points != null) {
          fd.points = tag.points;
        }
        if (tag.xaxis != null) {
          fd.xaxis = tag.xaxis;
        }
        if (tag.yaxis != null) {
          fd.yaxis = tag.yaxis;
        }
        if (tag.clickable) {
          fd.clickable = true;
        }
        if (tag.hoverable) {
          fd.hoverable = true;
        }
        if (tag.shadowSize != null) {
          fd.shadowSize = tag.shadowSize;
        }
        if (tag.hilightColor) {
          fd.hilightColor = tag.hilightColor;
        }
        if (tag.fill != null) {
          if (fd.lines == null) {
            fd.lines = {};
          }
          fd.lines.fill = tag.fill;
        }
        adv = ad != null ? ad[sidx] : null;
        for (i = _j = 0, _len1 = series.length; _j < _len1; i = ++_j) {
          v = series[i];
          if ((adv != null) && adv[i] !== 0) {
            dt = new Date(adv[i]);
          } else {
            tks = (i * incr) + data.firsttime.getTime();
            dt = new Date(tks);
          }
          bd.push([dt, v]);
        }
        if ((b.retain != null) && bd.length > b.retain) {
          bd = bd.slice(bd.length - b.retain);
        }
        fd.data = bd;
        flotData.push(fd);
      }
      return flotData;
    };

    return Flot;

  })();

  OPC.Alarm = (function() {

    function Alarm() {}

    Alarm.getAlarmBinding = function(data) {
      var ab, _i, _len, _ref;
      _ref = OPC.alarm_bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ab = _ref[_i];
        if (ab.guid === data.alarminstanceguid) {
          return ab;
        }
      }
      return null;
    };

    Alarm.init_alarms = function(oc) {
      var ab, abc, abs, container, _i, _len, _ref;
      abs = [];
      _ref = oc.alarm_bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ab = _ref[_i];
        container = $("#" + ab.alarmid, oc.root_elem);
        if ((container == null) || container.length === 0 || (container.dataTable == null)) {
          continue;
        }
        abc = new OPC.Alarm.Binding(ab, oc);
        abs.push(abc);
      }
      oc.alarm_bindings = abs;
      return abs;
    };

    Alarm.data_order = ["GroupBuffer", "NetworkNode", "AlarmID", "AlarmType", "Group", "Priority", "Text", "Active", "Acked", "TimeDelay", "AlarmValue", "AlarmLimit", "ClearedValue", "AlarmDateTime", "ClearedDateTime", "AckedDateTime", "AckedUser", "Units", "Document", "Comment", "OKToDelete", "OKToComment"];

    Alarm.data_idx = function(cn) {
      var c, i, _i, _len, _ref;
      _ref = this.data_order;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c === cn) {
          return i;
        }
      }
      return -1;
    };

    return Alarm;

  })();

  OPC.Alarm.Binding = (function() {

    Binding.default_font = {
      "font-family": "Helvetica, Arial, sans-serif",
      "font-size": "12px",
      "font-weight": "normal"
    };

    Binding.default_font_bold = {
      "font-family": Binding.default_font["font-family"],
      "font-size": Binding.default_font["font-size"],
      "font-weight": "bold"
    };

    Binding.default_filter = {
      includealarmactive: true,
      includealarmactiveacked: true,
      includealarmnotactive: true,
      includealarmnotactivenotacked: false,
      maxpriority: 1000000,
      minpriority: 0,
      alarmgroups: [],
      alarmtypes: ["Digital", "High", "High High", "Low", "Low Low", "Operator Event", "ROC", "System", "Tag Event"]
    };

    Binding.default_columns = [
      {
        name: "GroupBuffer",
        text: "",
        type: "string",
        visible: false
      }, {
        name: "AlarmID",
        text: "Alarm ID",
        type: "string",
        visible: false
      }, {
        name: "AlarmDateTime",
        text: "Alarm Date/Time",
        type: "datetime",
        visible: true,
        sort: 'desc',
        width: '130px',
        searchable: false
      }, {
        name: "Active",
        text: "Active",
        type: "boolean",
        visible: true,
        width: '50px',
        align: 'center'
      }, {
        name: "AlarmValue",
        text: "Alarm Value",
        type: "string",
        visible: true,
        align: 'right'
      }, {
        name: "Text",
        text: "Text",
        type: "string",
        visible: true
      }, {
        name: "AlarmType",
        text: "Alarm Type",
        type: "string",
        visible: true
      }, {
        name: "Group",
        text: "Group",
        type: "string",
        visible: true
      }, {
        name: "Priority",
        text: "Priority",
        type: "string",
        visible: true,
        width: '50px',
        align: 'right'
      }, {
        name: "AckedDateTime",
        text: "Acked Date/Time",
        type: "datetime",
        visible: true
      }, {
        name: "Acked",
        text: "Acked",
        type: "boolean",
        visible: true
      }, {
        name: "AckedUser",
        text: "Acked User",
        type: "string",
        visible: false
      }, {
        name: "ClearedDateTime",
        text: "Cleared Date/Time",
        type: "datetime",
        visible: false
      }, {
        name: "ClearedValue",
        text: "Cleared Value",
        type: "string",
        visible: false
      }, {
        name: "NetworkNode",
        text: "Network Node",
        type: "string",
        visible: false
      }, {
        name: "Units",
        text: "Units",
        type: "string",
        visible: false
      }, {
        name: "TimeDelay",
        text: "Delay Time",
        type: "string",
        visible: false
      }, {
        name: "Document",
        text: "Document",
        type: "string",
        width: '50px',
        align: 'center',
        visible: false,
        searchable: false,
        sortable: false
      }, {
        name: "Comment",
        text: "",
        type: "string",
        visible: false,
        searchable: false,
        sortable: false
      }, {
        name: "OKToComment",
        text: "Comment",
        type: "string",
        width: '50px',
        align: 'center',
        searchable: false,
        sortable: false
      }, {
        name: "OKToDelete",
        text: "Delete",
        type: "string",
        width: '50px',
        align: 'center',
        searchable: false,
        sortable: false
      }
    ];

    function Binding(c, conn) {
      var ackCol, actCol, col, cols, dcol, gc, hasAck, hasAct, hasID, idCol, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      this.grouphead_click = function(e) {
        return Binding.prototype.grouphead_click.apply(_this, arguments);
      };
      this.set_group_visibility = function() {
        return Binding.prototype.set_group_visibility.apply(_this, arguments);
      };
      this.row_callback = function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        return Binding.prototype.row_callback.apply(_this, arguments);
      };
      this.alarmid = c.alarmid != null ? c.alarmid : "missing_alarmid";
      this.showProcessing = c.showProcessing != null ? c.showProcessing : true;
      this.pagination = c.pagination != null ? c.pagination : false;
      this.pageLength = c.pageLength != null ? c.pageLength : 10;
      this.disableAlarmAckOnDoubleClick = c.disableAlarmAckOnDoubleClick != null ? c.disableAlarmAckOnDoubleClick : false;
      this.showDelete = c.showDelete != null ? c.showDelete : true;
      this.showComment = c.showComment != null ? c.showComment : false;
      this.showSearch = c.showSearch != null ? c.showSearch : true;
      this.showHistory = c.showHistory != null ? c.showHistory : false;
      this.showInfo = c.showInfo ? c.showInfo : true;
      this.connection = conn;
      this.dateTimeFormat = c.dateTimeFormat ? c.dateTimeFormat : "mm/dd/yyyy hh:MM aa";
      this.dateFormat = c.dateFormat ? c.dateFormat : "mm/dd/yyyy";
      this.dateTimeHistorySelectionFormat = c.dateTimeHistorySelectionFormat ? dateTimeHistorySelectionFormat : "MM/dd/yyyy HH:mm:ss";
      this.filter = OPC.Alarm.Binding.default_filter;
      if (c.filter != null) {
        if (c.filter.includealarmactive != null) {
          this.filter.includealarmactive = c.filter.includealarmactive;
        }
        if (c.filter.includealarmactiveacked != null) {
          this.filter.includealarmactiveacked = c.filter.includealarmactiveacked;
        }
        if (c.filter.includealarmnotactive != null) {
          this.filter.includealarmnotactive = c.filter.includealarmnotactive;
        }
        if (c.filter.includealarmnotactivenotacked != null) {
          this.filter.includealarmnotactivenotacked = c.filter.includealarmnotactivenotacked;
        }
        if (c.filter.maxpriority != null) {
          this.filter.maxpriority = c.filter.maxpriority;
        }
        if (c.filter.minpriority != null) {
          this.filter.minpriority = c.filter.minpriority;
        }
        if (c.filter.alarmgroups != null) {
          this.filter.alarmgroups = c.filter.alarmgroups;
        }
        if (c.filter.alarmtypes != null) {
          this.filter.alarmtypes = c.filter.alarmtypes;
        }
      }
      this.columns = OPC.Alarm.Binding.default_columns;
      if (c.columns != null) {
        this.columns = c.columns;
        hasID = false;
        hasAct = false;
        hasAck = false;
        idCol = this.default_column_by_name("AlarmID");
        actCol = this.default_column_by_name("Active");
        ackCol = this.default_column_by_name("Acked");
        _ref = this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          if (col.name.toLowerCase() === 'alarmid') {
            hasID = true;
          }
          if (col.name.toLowerCase() === 'active') {
            hasAct = true;
          }
          if (col.name.toLowerCase() === 'acked') {
            hasAck = true;
          }
          _ref1 = OPC.Alarm.Binding.default_columns;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            dcol = _ref1[_j];
            if (col.name.toLowerCase() === dcol.name.toLowerCase()) {
              col.name = dcol.name;
              col.text = col.text != null ? col.text : dcol.text;
              col.type = col.type != null ? col.type : dcol.type;
              col.visible = col.visible != null ? col.visible : true;
              col.width = col.width != null ? col.width : dcol.width;
              col.align = col.align != null ? col.align : dcol.align;
              col.searchable = col.searchable != null ? col.searchable : dcol.searchable;
              col.sortable = col.sortable != null ? col.sortable : dcol.sortable;
              break;
            }
          }
        }
        if (!hasID) {
          idCol.visible = false;
          this.columns.push(idCol);
        }
        if (!hasAct) {
          actCol.visible = false;
          this.columns.push(actCol);
        }
        if (!hasAck) {
          ackCol.visible = false;
          this.columns.push(ackCol);
        }
      }
      _ref2 = this.columns;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        col = _ref2[_k];
        if (col.name === 'OKToDelete' && (col.visible == null)) {
          col.visible = this.showDelete;
        }
        if (col.name === 'OKToComment' && (col.visible == null)) {
          col.visible = this.showComment;
        }
      }
      this.networkNodes = c.networkNodes != null ? c.networkNodes : [];
      this.callback = c.callback;
      this.rowClickCallback = c.rowClickCallback;
      this.height = c.height;
      this.group_exp = {};
      this.grouping = c.grouping != null ? c.grouping : false;
      this.groupingColumns = c.groupingColumns;
      if (this.groupingColumns != null) {
        cols = this.groupingColumns.split(',');
        this.groupingColumns = [];
        for (_l = 0, _len3 = cols.length; _l < _len3; _l++) {
          gc = cols[_l];
          if (gc.trim() !== '') {
            this.groupingColumns.push(gc.trim());
          }
        }
      }
      this.groupingColumns = this.groupingColumns != null ? this.groupingColumns : [];
      if (this.grouping && this.groupingColumns.length > 0) {
        this.viscount = 0;
        _ref3 = this.columns;
        for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
          c = _ref3[_m];
          if (c.name === "GroupBuffer") {
            c.visible = true;
          }
          _ref4 = this.groupingColumns;
          for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
            gc = _ref4[_n];
            if (c.name === gc) {
              c.visible = false;
              break;
            }
          }
          if (c.visible) {
            this.viscount += 1;
          }
        }
      }
      this.backlog = [];
      this.updating = true;
      this.draw_table();
    }

    Binding.prototype.get_data = function() {
      var adr,
        _this = this;
      adr = {
        networknodes: this.networkNodes != null ? this.networkNodes : [],
        alarmfilter: this.filter ? this.filter : [],
        token: this.connection.token,
        requesttype: this.requesttype,
        starthistorydate: this.starthistorydate,
        endhistorydate: this.endhistorydate,
        alarminstanceguid: this.guid
      };
      this.cid = OPC.callback_id++;
      this.connection.get({
        url: '/getalarmdata',
        data: adr,
        cid: this.cid,
        success: (function(cid) {
          return function(data, xhr) {
            console.log(_this.connection.root_elem[0]);
            _this.guid = data.alarminstanceguid;
            if (_this.doclear && (_this.requesttype != null) && _this.requesttype !== '' && _this.requesttype.indexOf('Data') >= 0) {
              _this.data_table.fnClearTable();
              _this.doclear = false;
            }
            if (_this.requesttype === "HistoryRequest" || _this.requesttype === "HistoryData") {
              _this.requesttype = "HistoryData";
            } else {
              _this.requesttype = "NewData";
            }
            if ((data != null) && (data.alarmvalues != null)) {
              _this.update_data(data.alarmvalues);
            }
            if (_this.callback != null) {
              _this.callback(_this, data);
            }
            OPC.clean_callback(cid);
            return true;
          };
        })(this.cid),
        error: function(res) {
          return OPC.log("REFRESH ERROR: " + res.status + ", " + res.statusText);
        }
      });
      return true;
    };

    Binding.prototype.refresh_data = function() {
      if (this.requesttype == null) {
        this.requesttype = "RefreshAllData";
      }
      if (this.guid != null) {

      } else {
        this.guid = "";
      }
      if (this.mode == null) {
        this.mode = "alarms";
      }
      this.get_data();
      return this;
    };

    Binding.prototype.send_update = function(aid, nn, rtype, details) {
      var req,
        _this = this;
      req = {
        token: this.connection.token,
        alarmid: aid,
        networknode: nn,
        requesttype: rtype
      };
      if (rtype === 'Comment') {
        req.comment = details;
      }
      this.cid = OPC.callback_id++;
      this.connection.get({
        url: '/updatealarm',
        data: req,
        cid: this.cid,
        success: (function(cid) {
          return function(data, xhr) {
            OPC.clean_callback(cid);
            return true;
          };
        })(this.cid),
        error: function(res) {
          return OPC.log("REFRESH ERROR: " + res.status + ", " + res.statusText);
        }
      });
      return true;
    };

    Binding.prototype.get_history = function(sd, ed) {
      sd = new Date(sd);
      ed = new Date(ed);
      this.requesttype = 'HistoryRequest';
      this.starthistorydate = sd.getTime();
      this.endhistorydate = ed.getTime();
      this.doclear = true;
      return this;
    };

    Binding.prototype.get_realtime = function() {
      this.requesttype = 'RefreshAllData';
      delete this.starthistorydate;
      delete this.endhistorydate;
      this.doclear = true;
      return this;
    };

    Binding.prototype.default_column_by_name = function(name) {
      var dcol, _i, _len, _ref;
      _ref = OPC.Alarm.Binding.default_columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dcol = _ref[_i];
        if (name.toLowerCase() === dcol.name.toLowerCase()) {
          return dcol;
          break;
        }
      }
      return null;
    };

    Binding.prototype.draw_table = function() {
      var c, cidx, cls, col, cols, dt_config, gc, order, sort, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.container = $("#" + this.alarmid, this.connection.root_elem);
      if ((this.container == null) || this.container.length === 0) {
        this.connection.log("Missing alarm container #" + this.alarmid);
        return false;
      }
      this.container.empty();
      this.table = $("<table id='" + this.alarmid + "_tbl' width='100%' class='opc-alarm'></table>");
      this.container.append(this.table);
      if (this.columns == null) {
        this.columns = [];
      }
      cols = [];
      sort = [];
      _ref = this.columns;
      for (cidx = _i = 0, _len = _ref.length; _i < _len; cidx = ++_i) {
        col = _ref[cidx];
        c = {
          sTitle: col.text != null ? col.text : col.name,
          bVisible: col.visible,
          bSortable: col.sortable != null ? col.sortable : true,
          bSearchable: col.searchable != null ? col.searchable : true,
          sWidth: col.width != null ? col.width : null
        };
        cls = '';
        if (col.align != null) {
          cls += " " + col.align;
        }
        if (cls !== '') {
          c.sClass = cls;
        }
        cols.push(c);
        if (col.sort != null) {
          sort.push([cidx, col.sort]);
        }
      }
      dt_config = {
        fnRowCallback: this.row_callback,
        aaSorting: sort,
        aoColumns: cols,
        bScrollCollapse: true,
        iDisplayLength: this.pageLength,
        bPaginate: this.pagination,
        bProcessing: this.showProcessing,
        bAutoWidth: false,
        bFilter: this.showSearch != null ? this.showSearch : false,
        bInfo: this.showInfo != null ? this.showInfo : false
      };
      if (this.grouping && this.groupingColumns.length > 0) {
        order = [];
        _ref1 = this.groupingColumns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          gc = _ref1[_j];
          cidx = this.column_idx(gc);
          order.push([cidx, 'asc']);
        }
        dt_config.order = order;
      }
      if (this.height != null) {
        dt_config.sScrollY = this.height;
        dt_config.bPaginate = false;
        dt_config.bScrollCollapse = true;
      }
      this.data_table = this.table.dataTable(dt_config);
      if (this.showHistory) {
        this.history_container = $("<div class='history-container'><span class='history-label'>Alarm History Start:</span></div>");
        $(this.data_table).parent().prepend(this.history_container);
        this.history_start = $("<input type='text' id='history_start' placeholder='mm/dd/yyyy hh:mm am/pm'></input>");
        this.history_end = $("<input type='text' id='history_end' placeholder='mm/dd/yyyy hh:mm am/pm'></input>");
        this.history_go = $("<button id='history_go'>GO</button>");
        this.history_container.append(this.history_start);
        this.history_container.append($("<span class='history-label'>End:</span> "));
        this.history_container.append(this.history_end);
        this.history_container.append(this.history_go);
        this.history_go.click(function(e) {
          var dte, dts;
          if (_this.history_go.hasClass('history')) {
            _this.history_go.removeClass('history');
            $("input[type=text], span", _this.history_container).show();
            _this.history_go.html('GO');
            return OPC.Alarm.get_realtime(_this);
          } else {
            _this.history_start.removeClass('err');
            _this.history_end.removeClass('err');
            dts = Date.parse(_this.history_start.val());
            dte = Date.parse(_this.history_end.val());
            if (!isNaN(dts)) {
              dts = new Date(dts);
            } else {
              _this.history_start.addClass('err');
            }
            if (!isNaN(dte)) {
              dte = new Date(dte);
            } else {
              _this.history_end.addClass('err');
            }
            if (!_this.history_start.hasClass('err') && !_this.history_end.hasClass('err')) {
              _this.history_go.addClass('history');
              $("input[type=text], span", _this.history_container).hide();
              _this.history_go.html('Resume Real Time Alarms');
              return OPC.Alarm.get_history(_this, _this.history_start.val(), _this.history_end.val());
            }
          }
        });
      }
      return this;
    };

    Binding.prototype.row_callback = function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
      var acked, active, cd, cls, cok, dok, dv, fmt, href, icn, idx, okc, okd, opEvent, rv, tagEvent, type, v, _i, _len, _ref;
      active = aData[this.column_idx("Active")];
      acked = aData[this.column_idx("Acked")];
      type = aData[this.column_idx("AlarmType")];
      tagEvent = type === "Tag Event";
      opEvent = type === "Operator Event";
      cls = 'active';
      if (!active) {
        cls = 'not-' + cls;
      }
      if (acked) {
        cls = cls + '-acked';
      }
      if (tagEvent) {
        cls = 'tag-event';
      }
      if (opEvent) {
        cls = 'operator-event';
      }
      $(nRow).removeClass('active').removeClass('not-active').removeClass('active-acked').removeClass('not-active-acked');
      $(nRow).removeClass('operator-event').removeClass('tag-event');
      $(nRow).addClass(cls);
      idx = 0;
      okc = aData[this.column_idx("OKToComment")];
      okc = (okc != null) && okc.toLowerCase() === "true" ? true : false;
      okd = aData[this.column_idx("OKToDelete")];
      okd = (okd != null) && okd.toLowerCase() === "true" ? true : false;
      _ref = this.columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cd = _ref[_i];
        if (!cd.visible) {
          continue;
        }
        v = aData[this.column_idx(cd.name)];
        if (cd.type === 'boolean') {
          dv = v ? 'fa-check-square-o' : 'fa-square-o';
          $("td:eq(" + idx + ")", nRow).html("<i class='fa " + dv + "'></i>");
        } else if (cd.type === 'datetime' || cd.type === 'date') {
          rv = '';
          dv = '';
          fmt = cd.type === 'datetime' ? this.dateTimeFormat : this.dateFormat;
          if ((v != null) && v !== '') {
            rv = v.getTime();
            dv = OPC.Util.formatDate(v, fmt);
          }
          $("td:eq(" + idx + ")", nRow).html("<span class='hide'>" + rv + "</span>" + dv);
        }
        if (cd.name === 'Document') {
          href = v != null ? v : '#';
          icn = (v != null) && v !== '' ? 'file-o' : '';
          $("td:eq(" + idx + ")", nRow).html("<a href='" + href + "' target='_blank'><i class='fa fa-" + icn + "'></i></a>");
        } else if (cd.name === 'OKToComment') {
          cok = okc ? '' : 'disabled';
          icn = (v != null) && v !== '' ? 'comment' : 'comment-o';
          $("td:eq(" + idx + ")", nRow).html("<a href='#' title='View/Edit Alarm Comments' class='comment-row " + cok + "'><i class='fa fa-" + icn + " " + cok + "'></i></a>");
        } else if (cd.name === 'OKToDelete') {
          dok = okd ? '' : 'disabled';
          $("td:eq(" + idx + ")", nRow).html("<a href='#' title='Delete Alarm' class='delete-row " + dok + "'><i class='fa fa-times-circle " + dok + "'></i></a>");
          $("td:eq(" + idx + ")", nRow).attr('title', 'Delete Alarm');
        } else {
          $("td:eq(" + idx + ")", nRow).attr('title', v);
        }
        idx++;
      }
      return nRow;
    };

    Binding.prototype.rearrange_data_row = function(dr) {
      var cn, i, ndr, tidx, _i, _len, _ref;
      ndr = new Array(this.columns.length);
      _ref = OPC.Alarm.data_order;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        cn = _ref[i];
        tidx = this.column_idx(cn);
        if (tidx >= 0) {
          ndr[tidx] = dr[i];
        }
      }
      return this.convert_data_row(ndr);
    };

    Binding.prototype.convert_data_row = function(dr) {
      var cd, i, v, _i, _len, _ref;
      _ref = this.columns;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        cd = _ref[i];
        if (cd.type === 'boolean') {
          v = (dr[i] != null) && dr[i] !== '' ? dr[i].toLowerCase() : false;
          v = v === 'true';
          dr[i] = v;
        }
        if (cd.type === 'datetime') {
          v = (dr[i] != null) && dr[i] !== '' ? dr[i].toLowerCase() : 0;
          v = new Date(parseInt(v));
          if (v !== '' && v.getTime() <= 0) {
            v = '';
          }
          dr[i] = v;
        }
      }
      return dr;
    };

    Binding.prototype.set_updating = function(ud) {
      var d, _i, _len, _ref;
      if (this.updating === ud) {
        return false;
      }
      this.updating = ud;
      if (ud) {
        _ref = this.backlog;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          this.update_data(d);
        }
        return this.backlog = [];
      }
    };

    Binding.prototype.set_group_visibility = function() {
      var c, exp, g, gh, grpid, i, ntr, r, rows, st, tclss, tlvl, _i, _results;
      if (!this.grouping || this.groupingColumns.length <= 0) {
        return;
      }
      _results = [];
      for (i = _i = 12; _i >= 1; i = --_i) {
        rows = $("tr.group_row.lvl" + i, this.data_table);
        _results.push((function() {
          var _j, _k, _len, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len = rows.length; _j < _len; _j++) {
            r = rows[_j];
            grpid = this.get_groupid(r);
            exp = true;
            if (grpid) {
              exp = this.group_exp[grpid] != null ? this.group_exp[grpid] : true;
              ntr = $(r).next();
              while (ntr) {
                if (!ntr.attr("class")) {
                  break;
                }
                tclss = ntr.attr("class").split(" ");
                tlvl = i + 1;
                for (_k = 0, _len1 = tclss.length; _k < _len1; _k++) {
                  c = tclss[_k];
                  if (c.indexOf("lvl") === 0) {
                    tlvl = parseInt(c.replace("lvl", ""));
                    break;
                  }
                }
                if (tlvl <= i) {
                  break;
                } else {
                  $(ntr).toggle(exp);
                }
                ntr = ntr.next();
              }
            }
            st = exp ? "minus-square-o" : "plus-square-o";
            $(r).find("span.exp_state").html("<i class='fa fa-" + st + "'></i>");
            _results1.push((function() {
              var _results2;
              _results2 = [];
              for (gh in this.group_exp) {
                if (!this.group_exp[gh]) {
                  g = gh.replace("grouphead-", "");
                  _results2.push($("tr.group-" + g).hide());
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Binding.prototype.get_groupid = function(r) {
      var c, clss, grpid, _i, _len;
      clss = $(r).attr("class").split(" ");
      grpid = null;
      for (_i = 0, _len = clss.length; _i < _len; _i++) {
        c = clss[_i];
        if (c.indexOf("grouphead-") === 0) {
          grpid = c;
          break;
        }
      }
      return grpid;
    };

    Binding.prototype.grouphead_click = function(e) {
      var exp, grpid, tgt, tr;
      tgt = $(e.target);
      tr = $(tgt).closest("tr");
      grpid = this.get_groupid(tr);
      exp = this.group_exp[grpid];
      if (exp == null) {
        exp = true;
      }
      this.group_exp[grpid] = !exp;
      this.set_group_visibility();
      return this;
    };

    Binding.prototype.render_groups = function() {
      var api, cleanval, col, d, exp_state, g, gcidx, glvl, gv, gval, i, last, path, pcol, pd, pg, pgcidx, rows, td, tr, _i, _j, _len, _len1, _ref;
      if (this.grouping && this.groupingColumns.length > 0) {
        api = this.data_table.api();
        glvl = 0;
        rows = api.rows({
          page: 'current'
        }).nodes();
        pg = null;
        _ref = this.groupingColumns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          glvl += 1;
          pgcidx = pg ? this.column_idx(pg) : 0;
          gcidx = this.column_idx(g);
          pd = pg ? api.column(pgcidx, {
            page: 'current'
          }).data() : null;
          d = api.column(gcidx, {
            page: 'current'
          }).data();
          col = this.columns[gcidx];
          pcol = pd ? this.columns[pgcidx] : null;
          last = null;
          for (i = _j = 0, _len1 = d.length; _j < _len1; i = ++_j) {
            gv = d[i];
            if (col.type === "boolean") {
              gv = gv ? "True" : "False";
            }
            gval = pd ? "" + pd[i] + "-" + gv : gv;
            cleanval = (gval + "").replace(/\W/g, '');
            path = pd ? "" + pcol.name + "-" + col.name : col.name;
            if (gval !== last) {
              exp_state = "-";
              td = $("<td colspan='" + (this.viscount + 1) + "'><span class='exp_state'>" + exp_state + "</span> " + col.text + ": " + gv + "</td>");
              tr = $("<tr class='group_row lvl" + glvl + " grouphead-" + path + "-" + cleanval + "'></tr>");
              tr.append(td);
              td.click(this.grouphead_click);
              $(rows).eq(i).before(tr);
            }
            $(rows).eq(i).addClass("group-" + path + "-" + cleanval);
            last = gval;
          }
          pg = g;
        }
        $("tr.odd td:first-child, tr.even td:first-child").addClass("lvl" + this.groupingColumns.length).addClass("group-buffer");
        return this.set_group_visibility();
      }
    };

    Binding.prototype.update_data = function(data) {
      var ad, adata, adi, d, did, didx, filtered, idx, ndr, row, rr, txt, update, upi, _i, _j, _k, _len, _len1, _len2;
      if ((data == null) || data.length === 0) {
        return false;
      }
      idx = this.column_idx('AlarmID');
      didx = OPC.Alarm.data_idx('AlarmID');
      if (!this.updating) {
        this.backlog.push(data);
        return false;
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        row = data[_i];
        row.splice(0, 0, '');
      }
      adata = this.data_table.fnGetData();
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        d = data[_j];
        did = d[didx];
        txt = d[OPC.Alarm.data_idx('Text')];
        filtered = !this.check_filters(d);
        if (txt === 'DELETEALARM') {
          continue;
        }
        ndr = this.rearrange_data_row(d);
        update = false;
        rr = null;
        upi = null;
        for (adi = _k = 0, _len2 = adata.length; _k < _len2; adi = ++_k) {
          ad = adata[adi];
          if (ad[idx] === did) {
            update = true;
            if (filtered) {
              rr = adi;
            } else {
              upi = adi;
            }
            break;
          }
        }
        if (rr != null) {
          this.data_table.fnDeleteRow(rr);
          adata = this.data_table.fnGetData();
        } else if (update) {
          this.data_table.fnUpdate(ndr, adi);
        } else if (!filtered) {
          this.data_table.fnAddData([ndr]);
        }
      }
      this.set_handlers();
      this.render_groups();
      if (this.callback != null) {
        this.callback(this, data);
      }
      return this;
    };

    Binding.prototype.check_filters = function(d) {
      var acked, active, didx, idx, pr, res;
      idx = this.column_idx('AlarmID');
      didx = OPC.Alarm.data_idx('AlarmID');
      active = d[OPC.Alarm.data_idx('Active')] === 'True';
      acked = d[OPC.Alarm.data_idx('Acked')] === 'True';
      pr = d[OPC.Alarm.data_idx('Priority')];
      pr = (pr != null) && pr !== '' ? parseInt(pr) : 0;
      res = true;
      if ((this.filter.includealarmactive != null) && active) {
        res = res && (this.filter.includealarmactive && active);
      }
      if ((this.filter.includealarmactiveacked != null) && active && acked) {
        res = res && (this.filter.includealarmactiveacked && active && acked);
      }
      if ((this.filter.includealarmnotactive != null) && !active) {
        res = res && (this.filter.includealarmnotactive && !active);
      }
      if ((this.filter.includealarmnotactivenotacked != null) && !active && !acked) {
        res = res && (this.filter.includealarmnotactivenotacked && (!active && !acked));
      }
      res = res && (pr <= this.filter.maxpriority);
      res = res && (pr >= this.filter.minpriority);
      return res;
    };

    Binding.prototype.set_handlers = function() {
      var b;
      b = this;
      $('tbody tr').off('click');
      $('tbody tr').on('click', function(e) {
        var aData, aPos, aid, crs, nn,
          _this = this;
        if (this.clicks == null) {
          this.clicks = 0;
        }
        ++this.clicks;
        if (this.clicks === 2) {
          this.clicks = 0;
          aPos = b.data_table.fnGetPosition(this);
          aData = b.data_table.fnGetData(aPos);
          aid = b.alarm_id(aData);
          nn = b.network_node(aData);
          if (document.selection && document.selection.empty) {
            document.selection.empty();
          } else if (window.getSelection) {
            window.getSelection().removeAllRanges();
          }
          b.send_update(aid, nn, 'Ack');
          if (b.rowClickCallback != null) {
            b.rowClickCallback(aData);
          }
        }
        crs = function() {
          return _this.clicks = 0;
        };
        return setTimeout(crs, 500);
      });
      $("a.comment-row", this.table).off("click");
      $('a.comment-row', this.table).click(function(e) {
        var aData, aPos, aid, buttons, c, cc, mcfg, mdl, nn, r,
          _this = this;
        if ($(e.target).hasClass('disabled')) {
          return false;
        }
        r = $(this).closest("tr");
        if (!r || r.length === 0) {
          return false;
        }
        aPos = b.data_table.fnGetPosition(r[0]);
        aData = b.data_table.fnGetData(aPos);
        aid = b.alarm_id(aData);
        nn = b.network_node(aData);
        cc = b.value_for(aData, 'OKToComment');
        cc = cc.toLowerCase() === 'true' ? true : false;
        c = "       <label>Current comments on this Alarm:</label>        <div class='old-comments'>" + (b.value_for(aData, "Comment")) + "</div>     ";
        buttons = [
          {
            text: "CANCEL"
          }
        ];
        if (cc) {
          c += "<label>Add new comment(s):</label><textarea class='new-comment'></textarea>";
          buttons.push({
            text: "SAVE",
            click: function(m) {
              var nc;
              nc = $('textarea.new-comment', m.dialog).val().trim();
              if (nc !== '') {
                return OPC.Alarm.send_update(aid, nn, 'Comment', nc);
              }
            }
          });
        }
        mcfg = {
          title: "View/Add Alarm Comments",
          show_input: true,
          cls: "comment-dialog",
          contents: c,
          buttons: buttons
        };
        mdl = new OPC.Modal(mcfg);
        return false;
      });
      $("a.delete-row", this.table).off("click");
      return $('a.delete-row', this.table).click(function(e) {
        var aData, aPos, aid, nn, r;
        if ($(e.target).hasClass('disabled')) {
          return false;
        }
        r = $(this).closest("tr");
        if (!r || r.length === 0) {
          return false;
        }
        aPos = b.data_table.fnGetPosition(r[0]);
        aData = b.data_table.fnGetData(aPos);
        aid = b.alarm_id(aData);
        nn = b.network_node(aData);
        b.send_update(aid, nn, 'Delete');
        b.data_table.fnDeleteRow(aPos);
        b.render_groups();
        return false;
      });
    };

    Binding.prototype.column_idx = function(cn) {
      var c, i, _i, _len, _ref;
      _ref = this.columns;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c.name === cn) {
          return i;
        }
      }
      return -1;
    };

    Binding.prototype.value_for = function(data, cn) {
      return data[this.column_idx(cn)];
    };

    Binding.prototype.alarm_id = function(data) {
      return this.value_for(data, "AlarmID");
    };

    Binding.prototype.network_node = function(data) {
      return this.value_for(data, "NetworkNode");
    };

    return Binding;

  })();

  OPC.OneClick = (function() {

    function OneClick() {}

    OneClick.send_update = function(ab, aid, nn, rtype, details) {
      return this;
    };

    OneClick.parse_tag_data = function(data) {
      var d, t, _i, _len;
      this.TagList = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        t = new OPC.OneClick.TagData(d);
        this.TagList.push(t);
      }
      return this;
    };

    OneClick.get_tags = function() {
      var ab, adr;
      adr = {
        token: OPC.token,
        networknode: 'localhost',
        version: 1
      };
      ab = {
        cid: OPC.callback_id++
      };
      OPC.get({
        url: '/gettagsandproperties',
        data: adr,
        cid: ab.cid,
        success: (function(cid) {
          return function(data, xhr) {
            if ((data != null) && (data.data != null) && data.data.length > 0) {
              OPC.OneClick.parse_tag_data(data.data);
            }
            OPC.clean_callback(cid);
            return this;
          };
        })(ab.cid),
        error: function(res) {
          return OPC.log("REFRESH ERROR: " + res.status + ", " + res.statusText);
        }
      });
      return this;
    };

    OneClick.find_tag = function(name) {
      var t, tags, _i, _len, _ref;
      tags = [];
      if (!this.TagList || this.TagList.length === 0) {
        return tags;
      }
      _ref = this.TagList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.TagName.toLowerCase().indexOf(name.toLowerCase()) === 0) {
          tags.push(t);
        }
      }
      return tags;
    };

    return OneClick;

  })();

  OPC.OneClick.TagData = (function() {

    function TagData(c) {
      this.TagName = c[0];
      this.DataType = c[1];
      this.IsTrendPoint = c[2];
      this.IsHighHighAlarmLimit = c[3];
      this.IsHighAlarmLimit = c[4];
      this.IsLowAlarmLimit = c[5];
      this.IsLowLowAlarmLimit = c[6];
      this.IsDigitalAlarmLimit = c[7];
      this.IsROCAlarmLimit = c[8];
      this.ValueHighRange = c[9];
      this.ValueLowRange = c[10];
      this;
    }

    return TagData;

  })();

}).call(this);
